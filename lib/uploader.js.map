{
  "version": 3,
  "file": "uploader.js",
  "sourceRoot": "..",
  "sources": [
    "src/uploader.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "config = require(\"./config\")\nif config().upload_prefix && config().upload_prefix[0..4] == 'http:'\n  https = require('http')\nelse\n  https = require('https')\n#http = require('http')\nUploadStream = require('./upload_stream')\nutils = require(\"./utils\")\n{\n  extend\n  includes, \n  isArray, \n  isObject, \n} = utils\nfs = require('fs')\npath = require('path')\nQ = require('q')\nWritable = require(\"stream\").Writable\n\n\n# Multipart support based on http://onteria.wordpress.com/2011/05/30/multipartform-data-uploads-using-node-js-and-http-request/\nbuild_upload_params = (options) ->\n  utils.build_upload_params(options)\n\nexports.unsigned_upload_stream = (upload_preset, callback, options = {}) ->\n  exports.upload_stream(callback, utils.merge(options, unsigned: true, upload_preset: upload_preset))\n\nexports.upload_stream = (callback, options = {}) ->\n  exports.upload(null, callback, extend({stream: true}, options))\n\nexports.unsigned_upload = (file, upload_preset, callback, options = {}) ->\n  exports.upload(file, callback, utils.merge(options, unsigned: true, upload_preset: upload_preset))\n\nexports.upload = (file, callback, options = {}) ->\n  call_api \"upload\", callback, options, ->\n    params = build_upload_params(options)\n    if file? && file.match(/^ftp:|^https?:|^s3:|^data:[^;]*;base64,([a-zA-Z0-9\\/+\\n=]+)$/)\n      [params, file: file]\n    else\n      [params, {}, file]\n\nexports.upload_large = (path, callback, options = {}) ->\n  if path? && path.match(/^https?:/)\n    exports.upload(path, callback, options)\n  else\n    exports.upload_chunked(path, callback, extend({resource_type: 'raw'}, options))\n\nexports.upload_chunked = (path, callback, options) ->\n  file_reader = fs.createReadStream(path)\n  out_stream = exports.upload_chunked_stream(callback, options)\n  return file_reader.pipe(out_stream)\n\nclass Chunkable extends Writable\n  constructor: (options)->\n    super(options)\n    @chunk_size = options.chunk_size  ? 20000000\n    @buffer = new Buffer(0)\n    @active = true\n    @on 'finish', () =>\n      @emit('ready', @buffer, true, ->) if @active\n\n  _write: (data, encoding, done) ->\n    return done() unless @active\n    if @buffer.length + data.length <= @chunk_size\n      @buffer = Buffer.concat([@buffer, data], @buffer.length + data.length);\n      done()\n    else\n      grab = @chunk_size - @buffer.length\n      @buffer = Buffer.concat([@buffer, data.slice(0, grab)], @buffer.length + grab)\n      @emit 'ready', @buffer, false, (@active) =>\n        if @active\n          @buffer = data.slice(grab)\n          done()\n\nexports.upload_large_stream = (_unused_, callback, options = {}) ->\n  exports.upload_chunked_stream(callback, extend({resource_type: 'raw'}, options))\n\nexports.upload_chunked_stream = (callback, options = {}) ->\n  options = extend({}, options, stream: true)\n  options.x_unique_upload_id = utils.random_public_id()\n  params = build_upload_params(options)\n\n  chunk_size = options.chunk_size ? options.part_size\n  chunker = new Chunkable(chunk_size: chunk_size)\n  sent = 0\n\n  chunker.on 'ready', (buffer, is_last, done) ->\n    chunk_start = sent\n    sent += buffer.length\n    options.content_range = \"bytes #{chunk_start}-#{sent - 1}/#{if is_last then sent else -1}\"\n    finished_part = (result) ->\n      if result.error? || is_last\n        callback?(result)\n        done(false)\n      else\n        done(true)\n    stream = call_api \"upload\", finished_part, options, ->\n      [params, {}, buffer]\n    stream.write(buffer, 'buffer', -> stream.end())\n\n  return chunker\n\nexports.explicit = (public_id, callback, options = {}) ->\n  call_api \"explicit\", callback, options, ->\n    utils.build_explicit_api_params(public_id, options)\n\n\n# Creates a new archive in the server and returns information in JSON format\nexports.create_archive = (callback, options = {}, target_format = null)->\n  call_api \"generate_archive\", callback, options, ->\n    opt = utils.archive_params(options)\n    opt.target_format = target_format if target_format\n    [opt]\n\n# Creates a new zip archive in the server and returns information in JSON format\nexports.create_zip = (callback, options = {})->\n  exports.create_archive(callback, options, \"zip\")\n\nexports.destroy = (public_id, callback, options = {}) ->\n  call_api \"destroy\", callback, options, ->\n    return [timestamp: utils.timestamp(), type: options.type, invalidate: options.invalidate, public_id: public_id]\n\nexports.rename = (from_public_id, to_public_id, callback, options = {}) ->\n  call_api \"rename\", callback, options, ->\n    return [\n      timestamp: utils.timestamp(),\n      type: options.type,\n      from_public_id: from_public_id,\n      to_public_id: to_public_id,\n      overwrite: options.overwrite,\n      invalidate: options.invalidate,\n      to_type: options.to_type\n    ]\n\nTEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\",\n  \"background\", \"opacity\", \"text_decoration\"]\nexports.text = (text, callback, options = {}) ->\n  call_api \"text\", callback, options, ->\n    params = {timestamp: utils.timestamp(), text: text}\n    for k in TEXT_PARAMS when options[k]?\n      params[k] = options[k]\n    [params]\n\nexports.generate_sprite = (tag, callback, options = {}) ->\n  call_api \"sprite\", callback, options, ->\n    transformation = utils.generate_transformation_string(extend({}, options, fetch_format: options.format))\n    return [{\n      timestamp: utils.timestamp(),\n      tag: tag,\n      transformation: transformation,\n      async: options.async,\n      notification_url: options.notification_url\n    }]\n\nexports.multi = (tag, callback, options = {}) ->\n  call_api \"multi\", callback, options, ->\n    transformation = utils.generate_transformation_string(extend({}, options))\n    return [{\n      timestamp: utils.timestamp(),\n      tag: tag,\n      transformation: transformation,\n      format: options.format,\n      async: options.async,\n      notification_url: options.notification_url\n    }]\n\nexports.explode = (public_id, callback, options = {}) ->\n  call_api \"explode\", callback, options, ->\n    transformation = utils.generate_transformation_string(extend({}, options))\n    return [{\n      timestamp: utils.timestamp(),\n      public_id: public_id,\n      transformation: transformation,\n      format: options.format,\n      type: options.type,\n      notification_url: options.notification_url\n    }]\n\n# options may include 'exclusive' (boolean) which causes clearing this tag from all other resources \nexports.add_tag = (tag, public_ids = [], callback, options = {}) ->\n  exclusive = utils.option_consume(\"exclusive\", options)\n  command = if exclusive then \"set_exclusive\" else \"add\"\n  call_tags_api(tag, command, public_ids, callback, options)\n\nexports.remove_tag = (tag, public_ids = [], callback, options = {}) ->\n  call_tags_api(tag, \"remove\", public_ids, callback, options)\n\nexports.remove_all_tags = (public_ids = [], callback, options = {}) ->\n  call_tags_api(null, \"remove_all\", public_ids, callback, options)\n\nexports.replace_tag = (tag, public_ids = [], callback, options = {}) ->\n  call_tags_api(tag, \"replace\", public_ids, callback, options)\n\ncall_tags_api = (tag, command, public_ids = [], callback, options = {}) ->\n  call_api \"tags\", callback, options, ->\n    params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    }\n    if tag?\n      params.tag = tag\n    return [params]\n\nexports.add_context = (context, public_ids = [], callback, options = {}) ->\n  call_context_api(context, 'add', public_ids, callback, options)\n\nexports.remove_all_context = (public_ids = [], callback, options = {}) ->\n  call_context_api(null, 'remove_all', public_ids, callback, options)\n\ncall_context_api = (context, command, public_ids = [], callback, options = {}) ->\n  call_api 'context', callback, options, ->\n    params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    }\n    if context?\n      params.context = utils.encode_context(context)\n    return [params]\n\ncall_api = (action, callback, options, get_params) ->\n  deferred = Q.defer()\n  options ?= {}\n\n  [params, unsigned_params, file] = get_params.call()\n\n  params = utils.process_request_params(params, options)\n  params = extend(params, unsigned_params)\n\n  api_url = utils.api_url(action, options)\n\n  boundary = utils.random_public_id()\n\n  error = false\n  handle_response = (res) ->\n    if error\n# Already reported\n    else if res.error\n      error = true\n      deferred.reject(res)\n      callback?(res)\n    else if includes([200, 400, 401, 404, 420, 500], res.statusCode)\n      buffer = \"\"\n      res.on \"data\", (d) -> buffer += d\n      res.on \"end\", ->\n        return if error\n        try\n          result = JSON.parse(buffer)\n        catch e\n          result = {error: {message: \"Server return invalid JSON response. Status Code #{res.statusCode}\"}}\n        result[\"error\"][\"http_code\"] = res.statusCode if result[\"error\"]\n        if result.error\n          deferred.reject(result.error)\n        else\n          deferred.resolve(result)\n        callback?(result)\n      res.on \"error\", (e) ->\n        error = true\n        deferred.reject(e)\n        callback?(error: e)\n    else\n      error_obj =\n        error: {message: \"Server returned unexpected status code - #{res.statusCode}\", http_code: res.statusCode}\n      deferred.reject(error_obj.error)\n      callback?(error_obj)\n  post_data = []\n  for key, value of params\n    if isArray(value)\n      for v in value\n        post_data.push new Buffer(EncodeFieldPart(boundary, key + \"[]\", v), 'utf8')\n    else if utils.present(value)\n      post_data.push new Buffer(EncodeFieldPart(boundary, key, value), 'utf8')\n\n  result = post api_url, post_data, boundary, file, handle_response, options\n  if isObject(result)\n    return result\n  else\n    return deferred.promise\n\npost = (url, post_data, boundary, file, callback, options) ->\n  finish_buffer = new Buffer(\"--\" + boundary + \"--\", 'ascii')\n  if file? || options.stream\n    filename = if options.stream then \"file\" else path.basename(file)\n    file_header = new Buffer(EncodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary')\n\n  post_options = require('url').parse(url)\n  headers =\n    'Content-Type': 'multipart/form-data; boundary=' + boundary\n    'User-Agent': utils.getUserAgent()\n  headers['Content-Range'] = options.content_range if options.content_range?\n  headers['X-Unique-Upload-Id'] = options.x_unique_upload_id if options.x_unique_upload_id?\n  post_options = extend post_options,\n    method: 'POST',\n    headers: headers\n  post_options.agent = options.agent if options.agent?\n  post_request = https.request(post_options, callback)\n  upload_stream = new UploadStream({boundary: boundary})\n  upload_stream.pipe(post_request)\n  timeout = false\n  post_request.on \"error\", (e) ->\n    if timeout\n      callback(error: {message: \"Request Timeout\", http_code: 499})\n    else\n      callback(error: e)\n  post_request.setTimeout options.timeout ? 60000, ->\n    timeout = true\n    post_request.abort()\n\n  for i in [0..post_data.length - 1]\n    post_request.write(post_data[i])\n\n  if options.stream\n    post_request.write(file_header)\n    return upload_stream\n  else if file?\n    post_request.write(file_header)\n    fs.createReadStream(file)\n    .on('error', (error)->\n      callback(error: error)\n      post_request.abort()\n    ).pipe(upload_stream)\n  else\n    post_request.write(finish_buffer)\n    post_request.end()\n\n  true\n\nEncodeFieldPart = (boundary, name, value) ->\n  return_part = \"--#{boundary}\\r\\n\"\n  return_part += \"Content-Disposition: form-data; name=\\\"#{name}\\\"\\r\\n\\r\\n\"\n  return_part += value + \"\\r\\n\"\n  return_part\n\nEncodeFilePart = (boundary, type, name, filename) ->\n  return_part = \"--#{boundary}\\r\\n\"\n  return_part += \"Content-Disposition: form-data; name=\\\"#{name}\\\"; filename=\\\"#{filename}\\\"\\r\\n\"\n  return_part += \"Content-Type: #{type}\\r\\n\\r\\n\"\n  return_part\n\nexports.direct_upload = (callback_url, options = {}) ->\n  params = build_upload_params(extend({callback: callback_url}, options))\n  params = utils.process_request_params(params, options)\n  api_url = utils.api_url(\"upload\", options)\n\n  return hidden_fields: params, form_attrs: {action: api_url, method: \"POST\", enctype: \"multipart/form-data\"}\n\nexports.upload_tag_params = (options = {}) ->\n  params = build_upload_params(options)\n  params = utils.process_request_params(params, options)\n  JSON.stringify(params)\n\nexports.upload_url = (options = {}) ->\n  options.resource_type ?= \"auto\"\n  utils.api_url(\"upload\", options)\n\nexports.image_upload_tag = (field, options = {}) ->\n  html_options = options.html ? {}\n\n  tag_options = extend( {\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options[\"class\"], \"cloudinary-fileupload\"].join(\" \")\n  }, html_options)\n  return '<input ' + utils.html_attrs(tag_options) + '/>'\n\nexports.unsigned_image_upload_tag = (field, upload_preset, options = {}) ->\n  exports.image_upload_tag(field, utils.merge(options, unsigned: true, upload_preset: upload_preset))\n"
  ]
}