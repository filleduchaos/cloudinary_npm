{
  "version": 3,
  "file": "search.js",
  "sourceRoot": "../..",
  "sources": [
    "src/v2/search.coffee"
  ],
  "names": [],
  "mappings": "AAAA,IAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA;;AAAA,GAAA,GAAM,OAAA,CAAQ,OAAR;;AACN,CAAA,CACE,OADF,EAEE,QAFF,CAAA,GAGI,OAAA,CAAQ,UAAR,CAHJ;;AAKM,SAAN,MAAA,OAAA;EACE,WAAa,CAAA,CAAA;IACX,IAAC,CAAA,UAAD,GAAc;MAAC,OAAA,EAAS,EAAV;MAAc,SAAA,EAAW,EAAzB;MAA6B,UAAA,EAAY;IAAzC;EADH;;EAGF,OAAV,QAAU,CAAA,CAAA;WACT,IAAI;EADK;;EAGE,OAAZ,UAAY,CAAC,KAAD,CAAA;WACX,IAAC,CAAA,QAAD,CAAA,CAAW,CAAC,UAAZ,CAAuB,KAAvB;EADW;;EAGC,OAAb,WAAa,CAAC,KAAD,CAAA;WACZ,IAAC,CAAA,QAAD,CAAA,CAAW,CAAC,WAAZ,CAAwB,KAAxB;EADY;;EAGA,OAAb,WAAa,CAAC,KAAD,CAAA;WACZ,IAAC,CAAA,QAAD,CAAA,CAAW,CAAC,WAAZ,CAAwB,KAAxB;EADY;;EAGF,OAAX,SAAW,CAAC,KAAD,CAAA;WACV,IAAC,CAAA,QAAD,CAAA,CAAW,CAAC,SAAZ,CAAsB,KAAtB;EADU;;EAGC,OAAZ,UAAY,CAAC,KAAD,CAAA;WACX,IAAC,CAAA,QAAD,CAAA,CAAW,CAAC,UAAZ,CAAuB,KAAvB;EADW;;EAGH,OAAT,OAAS,CAAC,UAAD,EAAa,MAAM,KAAnB,CAAA;WACR,IAAC,CAAA,QAAD,CAAA,CAAW,CAAC,OAAZ,CAAoB,UAApB,EAAgC,GAAhC;EADQ;;EAGV,UAAY,CAAC,KAAD,CAAA;IACV,IAAC,CAAA,UAAU,CAAC,UAAZ,GAAyB;WACzB;EAFU;;EAIZ,WAAa,CAAC,KAAD,CAAA;IACX,IAAC,CAAA,UAAU,CAAC,WAAZ,GAA0B;WAC1B;EAFW;;EAIb,WAAa,CAAC,KAAD,CAAA;IACX,IAAC,CAAA,UAAU,CAAC,WAAZ,GAA0B;WAC1B;EAFW;;EAIb,SAAW,CAAC,KAAD,CAAA;IACT,IAAC,CAAA,UAAU,CAAC,SAAS,CAAC,IAAtB,CAA2B,KAA3B;WACA;EAFS;;EAIX,UAAY,CAAC,KAAD,CAAA;IACV,IAAC,CAAA,UAAU,CAAC,UAAU,CAAC,IAAvB,CAA4B,KAA5B;WACA;EAFU;;EAIZ,OAAS,CAAC,UAAD,EAAa,MAAM,MAAnB,CAAA;AACP,QAAA;IAAA,WAAA,GAAc,CAAA;IACd,WAAY,CAAA,UAAA,CAAZ,GAA0B;IAC1B,IAAC,CAAA,UAAU,CAAC,OAAO,CAAC,IAApB,CAAyB,WAAzB;WACA;EAJO;;EAMT,QAAU,CAAA,CAAA;AACR,QAAA,CAAA,EAAA,GAAA,EAAA;AAAA;IAAA,KAAA,QAAA;;MACE,IAAyB,CAAC,QAAA,CAAS,CAAT,CAAD,IAAgB,OAAA,CAAQ,CAAR,CAAzC;QAAA,OAAO,IAAC,CAAA,UAAW,CAAA,CAAA,EAAnB;;IADF;WAEA,IAAC,CAAA;EAHO;;EAKV,OAAS,CAAC,OAAD,EAAU,QAAV,CAAA;IACP,IAAG,QAAA,KAAY,IAAf;MACE,QAAA,GAAW,QADb;;IAEA,YAAA,UAAY,CAAA;WACZ,GAAG,CAAC,MAAJ,CAAW,IAAI,CAAC,QAAL,CAAA,CAAX,EAA4B,OAA5B,EAAqC,QAArC;EAJO;;AAxDX;;AA8DA,MAAM,CAAC,OAAP,GAAiB",
  "sourcesContent": [
    "api = require('./api')\n{\n  isEmpty\n  isNumber\n} = require('../utils')\n\nclass Search\n  constructor: ()->\n    @query_hash = {sort_by: [], aggregate: [], with_field: []}\n\n  @instance: ()->\n    new Search\n\n  @expression: (value)->\n    @instance().expression(value)\n\n  @max_results: (value)->\n    @instance().max_results(value)\n\n  @next_cursor: (value)->\n    @instance().next_cursor(value)\n\n  @aggregate: (value)->\n    @instance().aggregate(value)\n\n  @with_field: (value)->\n    @instance().with_field(value)\n\n  @sort_by: (field_name, dir = 'asc')->\n    @instance().sort_by(field_name, dir)\n\n  expression: (value)->\n    @query_hash.expression = value\n    this\n\n  max_results: (value)->\n    @query_hash.max_results = value\n    this\n\n  next_cursor: (value)->\n    @query_hash.next_cursor = value\n    this\n\n  aggregate: (value)->\n    @query_hash.aggregate.push(value)\n    this\n\n  with_field: (value)->\n    @query_hash.with_field.push(value)\n    this\n\n  sort_by: (field_name, dir = \"desc\")->\n    sort_bucket = {}\n    sort_bucket[field_name] = dir\n    @query_hash.sort_by.push(sort_bucket)\n    this\n\n  to_query: ()->\n    for k,v of @query_hash\n      delete @query_hash[k] if !isNumber(v) && isEmpty(v)\n    @query_hash\n\n  execute: (options, callback)->\n    if callback == null\n      callback = options\n    options ||= {}\n    api.search(this.to_query(), options, callback)\n\nmodule.exports = Search\n"
  ]
}