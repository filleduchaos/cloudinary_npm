{
  "version": 3,
  "file": "preloaded_file.js",
  "sourceRoot": "..",
  "sources": [
    "src/preloaded_file.coffee"
  ],
  "names": [],
  "mappings": "AAAA,IAAA,yBAAA,EAAA,aAAA,EAAA,MAAA,EAAA;;AAAA,KAAA,GAAQ,OAAA,CAAQ,SAAR;;AACR,MAAA,GAAS,OAAA,CAAQ,UAAR;;AAET,yBAAA,GAA4B;;AAEtB,gBAAN,MAAA,cAAA;EACE,WAAa,CAAC,SAAD,CAAA;AACX,QAAA,OAAA,EAAA;IAAA,OAAA,GAAU,SAAS,CAAC,KAAV,CAAgB,yBAAhB;IACV,IAAwC,CAAC,OAAzC;MAAA,MAAM,8BAAN;;IAEA,IAAC,CAAA,aAAD,GAAiB,OAAQ,CAAA,CAAA;IACzB,IAAC,CAAA,IAAD,GAAQ,OAAQ,CAAA,CAAA;IAChB,IAAC,CAAA,OAAD,GAAW,OAAQ,CAAA,CAAA;IACnB,IAAC,CAAA,QAAD,GAAY,OAAQ,CAAA,CAAA;IACpB,IAAC,CAAA,SAAD,GAAa,OAAQ,CAAA,CAAA;IAErB,oBAAA,GAAuB,IAAC,CAAA,YAAD,CAAc,IAAC,CAAA,QAAf;IACvB,IAAC,CAAA,SAAD,GAAa,oBAAqB,CAAA,CAAA;IAClC,IAAC,CAAA,MAAD,GAAU,oBAAqB,CAAA,CAAA;EAZpB;;EAcb,QAAU,CAAA,CAAA;AACR,QAAA,kBAAA,EAAA;IAAA,SAAA,GAAe,IAAC,CAAA,aAAD,KAAkB,KAArB,GAAgC,IAAC,CAAA,QAAjC,GAA+C,IAAC,CAAA;IAC5D,kBAAA,GAAqB,KAAK,CAAC,gBAAN,CAAuB;MAAC,SAAA,EAAW,IAAC,CAAA,SAAb;MAAwB,OAAA,EAAS,IAAC,CAAA;IAAlC,CAAvB,EAAmE,MAAA,CAAA,CAAQ,CAAC,UAA5E;WACrB,IAAC,CAAA,SAAD,KAAc;EAHN;;EAKV,YAAc,CAAC,UAAD,CAAA;AACZ,QAAA,MAAA,EAAA,QAAA,EAAA;IAAA,QAAA,GAAW,UAAU,CAAC,WAAX,CAAuB,GAAvB;IAEX,IAA8B,QAAA,KAAY,CAAC,CAA3C;AAAA,aAAO,CAAC,UAAD,EAAa,IAAb,EAAP;;IACA,SAAA,GAAY,UAAU,CAAC,MAAX,CAAkB,CAAlB,EAAqB,QAArB;IACZ,MAAA,GAAS,UAAU,CAAC,MAAX,CAAkB,QAAA,GAAW,CAA7B;WACT,CAAC,SAAD,EAAY,MAAZ;EANY;;EAQd,UAAY,CAAA,CAAA;WACV,GAAA,GAAM,IAAC,CAAA,OAAP,GAAiB,GAAjB,GAAuB,IAAC,CAAA;EADd;;EAGZ,QAAU,CAAA,CAAA;WACR,IAAC,CAAA,aAAD,GAAiB,GAAjB,GAAuB,IAAC,CAAA,IAAxB,GAA+B,IAA/B,GAAsC,IAAC,CAAA,OAAvC,GAAiD,GAAjD,GAAuD,IAAC,CAAA,QAAxD,GAAmE,GAAnE,GAAyE,IAAC,CAAA;EADlE;;EAGV,MAAQ,CAAA,CAAA;AACN,QAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA;IAAA,MAAA,GAAS,CAAA;AACT;IAAA,KAAA,UAAA;;MACE,IAAqB,OAAO,GAAP,KAAe,UAApC;QAAA,MAAO,CAAA,GAAA,CAAP,GAAc,IAAd;;IADF;WAEA;EAJM;;AAlCV;;AAyCA,MAAM,CAAC,OAAP,GAAiB",
  "sourcesContent": [
    "utils = require(\"./utils\")\nconfig = require(\"./config\")\n\nPRELOADED_CLOUDINARY_PATH = /^([^\\/]+)\\/([^\\/]+)\\/v(\\d+)\\/([^#]+)#([^\\/]+)$/\n\nclass PreloadedFile\n  constructor: (file_info) ->\n    matches = file_info.match(PRELOADED_CLOUDINARY_PATH)\n    throw(\"Invalid preloaded file info\") if !matches\n\n    @resource_type = matches[1]\n    @type = matches[2]\n    @version = matches[3]\n    @filename = matches[4]\n    @signature = matches[5]\n\n    public_id_and_format = @split_format(@filename)\n    @public_id = public_id_and_format[0]\n    @format = public_id_and_format[1]\n\n  is_valid: ->\n    public_id = if @resource_type == \"raw\" then @filename else @public_id\n    expected_signature = utils.api_sign_request({public_id: @public_id, version: @version}, config().api_secret)\n    @signature == expected_signature\n\n  split_format: (identifier) ->\n    last_dot = identifier.lastIndexOf(\".\")\n\n    return [identifier, null] if (last_dot == -1)\n    public_id = identifier.substr(0, last_dot)\n    format = identifier.substr(last_dot + 1)\n    [public_id, format]\n\n  identifier: ->\n    \"v\" + @version + \"/\" + @filename\n\n  toString: ->\n    @resource_type + \"/\" + @type + \"/v\" + @version + \"/\" + @filename + \"#\" + @signature\n\n  toJSON: ->\n    result = {}\n    for key, val of this\n      result[key] = val if typeof(val) != 'function'\n    result\n\n\nmodule.exports = PreloadedFile\n"
  ]
}