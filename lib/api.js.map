{
  "version": 3,
  "file": "api.js",
  "sourceRoot": "..",
  "sources": [
    "src/api.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "config = require(\"./config\")\nif config().upload_prefix && config().upload_prefix[0..4] == 'http:'\n  https = require('http')\nelse\n  https = require('https')\nutils = require(\"./utils\")\n{\n  extend, \n  includes, \n  isString, \n  only\n} = utils\nquerystring = require(\"querystring\")\nQ = require('q')\n\napi = module.exports\n\ncall_api = (method, uri, params, callback, options) ->\n  deferred = Q.defer()\n  cloudinary = options[\"upload_prefix\"] ? config(\"upload_prefix\") ? \"https://api.cloudinary.com\"\n  cloud_name = options[\"cloud_name\"] ? config(\"cloud_name\") ? throw(\"Must supply cloud_name\")\n  api_key = options[\"api_key\"] ? config(\"api_key\") ? throw(\"Must supply api_key\")\n  api_secret = options[\"api_secret\"] ? config(\"api_secret\") ? throw(\"Must supply api_secret\")\n  api_url = [cloudinary, \"v1_1\", cloud_name].concat(uri).join(\"/\")\n  content_type ='application/x-www-form-urlencoded'\n  if options['content_type']=='json'\n    query_params = JSON.stringify(params)\n    content_type='application/json'\n  else\n    query_params = querystring.stringify(params)\n  if method == \"get\"\n    api_url += \"?\" + query_params\n\n  request_options = require('url').parse(api_url)\n  request_options = extend request_options,\n    method: method.toUpperCase()\n    headers:\n      'Content-Type': content_type\n      'User-Agent': utils.getUserAgent()\n    auth: \"#{api_key}:#{api_secret}\"\n  request_options.agent = options.agent if options.agent?\n  request_options.headers['Content-Length'] = Buffer.byteLength(query_params) unless method == \"get\"\n  handle_response = (res) ->\n    if includes([200, 400, 401, 403, 404, 409, 420, 500], res.statusCode)\n      buffer = \"\"\n      error = false\n      res.on \"data\", (d) -> buffer += d\n      res.on \"end\", ->\n        return if error\n        try\n          result = JSON.parse(buffer)\n        catch e\n          result = {error: {message: \"Server return invalid JSON response. Status Code #{res.statusCode}\"}}\n        if result[\"error\"]\n          result[\"error\"][\"http_code\"] = res.statusCode\n        else\n          result[\"rate_limit_allowed\"] = parseInt(res.headers[\"x-featureratelimit-limit\"])\n          result[\"rate_limit_reset_at\"] = new Date(res.headers[\"x-featureratelimit-reset\"])\n          result[\"rate_limit_remaining\"] = parseInt(res.headers[\"x-featureratelimit-remaining\"])\n\n        if (result.error)\n          deferred.reject(result)\n        else\n          deferred.resolve(result)\n        callback?(result)\n      res.on \"error\", (e) ->\n        error = true\n        err_obj = error: {message: e, http_code: res.statusCode}\n        deferred.reject(err_obj.error)\n        callback?(err_obj)\n    else\n      err_obj =\n        error: {message: \"Server returned unexpected status code - #{res.statusCode}\", http_code: res.statusCode}\n      deferred.reject(err_obj.error)\n      callback?(err_obj)\n\n  request = https.request(request_options, handle_response)\n  request.on \"error\", (e) -> callback?(error: e)\n  request.setTimeout options[\"timeout\"] ? 60000\n\n  if method != \"get\"\n    request.write(query_params)\n\n  request.end()\n\n  return deferred.promise\n\ntransformation_string = (transformation) ->\n  if isString(transformation)\n    transformation\n  else\n    utils.generate_transformation_string(extend({}, transformation))\n\ndelete_resources_params = (options, params = {}) ->\n  extend(params, only(options, \"keep_original\", \"invalidate\", \"next_cursor\", \"transformations\"))\n\nexports.ping = (callback, options = {}) ->\n  call_api(\"get\", [\"ping\"], {}, callback, options)\n\nexports.usage = (callback, options = {}) ->\n  call_api(\"get\", [\"usage\"], {}, callback, options)\n\nexports.resource_types = (callback, options = {}) ->\n  call_api(\"get\", [\"resources\"], {}, callback, options)\n\nexports.resources = (callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"]\n  uri = [\"resources\", resource_type]\n  uri.push type if type?\n  options.start_at = options.start_at.toUTCString() if options.start_at? && Object.prototype.toString.call(options.start_at) == '[object Date]'\n  call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"prefix\", \"tags\", \"context\", \"direction\", \"moderations\", \"start_at\"), callback, options)\n\nexports.resources_by_tag = (tag, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  uri = [\"resources\", resource_type, \"tags\", tag]\n  call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\"), callback, options)\n\nexports.resources_by_context= (key,value, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  uri = [\"resources\", resource_type, \"context\"]\n  params = only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\")\n  params.key = key\n  params.value = value if value?\n  call_api(\"get\", uri,params , callback, options)\n\nexports.resources_by_moderation = (kind, status, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  uri = [\"resources\", resource_type, \"moderations\", kind, status]\n  call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\"), callback, options)\n\nexports.resources_by_ids = (public_ids, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type]\n  params = only(options, \"tags\", \"context\", \"moderations\")\n  params[\"public_ids[]\"] = public_ids\n  call_api(\"get\", uri, params, callback, options)\n\nexports.resource = (public_id, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type, public_id]\n  call_api(\"get\", uri, only(options, \"exif\", \"colors\", \"faces\", \"image_metadata\", \"pages\", \"phash\", \"coordinates\", \"max_results\"), callback, options)\n\nexports.restore = (public_ids, callback, options = {})->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type, \"restore\"]\n  call_api(\"post\", uri, {public_ids: public_ids}, callback, options)\n\nexports.update = (public_id, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type, public_id]\n  params = utils.updateable_resource_params(options)\n  params.moderation_status = options.moderation_status if options.moderation_status?\n  call_api(\"post\", uri, params, callback, options)\n\nexports.delete_resources = (public_ids, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type]\n  call_api(\"delete\", uri, delete_resources_params(options, {\"public_ids[]\": public_ids}), callback, options)\n\nexports.delete_resources_by_prefix = (prefix, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type]\n  call_api(\"delete\", uri, delete_resources_params(options, {prefix: prefix}), callback, options)\n\nexports.delete_resources_by_tag = (tag, callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  uri = [\"resources\", resource_type, \"tags\", tag]\n  call_api(\"delete\", uri, delete_resources_params(options), callback, options)\n\nexports.delete_all_resources = (callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  type = options[\"type\"] ? \"upload\"\n  uri = [\"resources\", resource_type, type]\n  call_api(\"delete\", uri, delete_resources_params(options, {all: yes}), callback, options) \n\nexports.delete_derived_resources = (derived_resource_ids, callback, options = {}) ->\n  uri = [\"derived_resources\"]\n  call_api(\"delete\", uri, {\"derived_resource_ids[]\": derived_resource_ids}, callback, options)\n\nexports.delete_derived_by_transformation = (public_ids, transformations, callback, options={}) ->\n  resource_type = options[\"resource_type\"] || \"image\"\n  type          = options[\"type\"] || \"upload\"\n  uri           = \"resources/#{resource_type}/#{type}\"\n  params = extend({\"public_ids[]\": public_ids}, only(options, \"invalidate\"))\n  params[\"keep_original\"] = true\n  params[\"transformations\"] = utils.build_eager(transformations)\n  call_api(\"delete\", uri, params, callback, options)\n\nexports.tags = (callback, options = {}) ->\n  resource_type = options[\"resource_type\"] ? \"image\"\n  uri = [\"tags\", resource_type]\n  call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\", \"prefix\"), callback, options)\n\nexports.transformations = (callback, options = {}) ->\n  call_api(\"get\", [\"transformations\"], only(options, \"next_cursor\", \"max_results\"), callback, options)\n\nexports.transformation = (transformation, callback, options = {}) ->\n  uri = [\"transformations\", transformation_string(transformation)]\n  call_api(\"get\", uri, only(options, \"next_cursor\", \"max_results\"), callback, options)\n\nexports.delete_transformation = (transformation, callback, options = {}) ->\n  uri = [\"transformations\", transformation_string(transformation)]\n  call_api(\"delete\", uri, {}, callback, options)\n\n# updates - currently only supported update is the \"allowed_for_strict\" boolean flag\nexports.update_transformation = (transformation, updates, callback, options = {}) ->\n  uri = [\"transformations\", transformation_string(transformation)]\n  params = only(updates, \"allowed_for_strict\")\n  params.unsafe_update = transformation_string(updates.unsafe_update) if updates.unsafe_update?\n  call_api(\"put\", uri, params, callback, options)\n\nexports.create_transformation = (name, definition, callback, options = {}) ->\n  uri = [\"transformations\", name]\n  call_api(\"post\", uri, {transformation: transformation_string(definition)}, callback, options)\n\n\nexports.upload_presets = (callback, options = {}) ->\n  call_api(\"get\", [\"upload_presets\"], only(options, \"next_cursor\", \"max_results\"), callback, options)\n\nexports.upload_preset = (name, callback, options = {}) ->\n  uri = [\"upload_presets\", name]\n  call_api(\"get\", uri, {}, callback, options)\n\nexports.delete_upload_preset = (name, callback, options = {}) ->\n  uri = [\"upload_presets\", name]\n  call_api(\"delete\", uri, {}, callback, options)\n\nexports.update_upload_preset = (name, callback, options = {}) ->\n  uri = [\"upload_presets\", name]\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), only(options, \"unsigned\", \"disallow_public_id\"))\n  call_api(\"put\", uri, params, callback, options)\n\nexports.create_upload_preset = (callback, options = {}) ->\n  uri = [\"upload_presets\"]\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), only(options, \"name\", \"unsigned\", \"disallow_public_id\"))\n  call_api(\"post\", uri, params, callback, options)\n\nexports.root_folders = (callback, options = {}) ->\n  uri = [\"folders\"]\n  call_api(\"get\", uri, {}, callback, options)\n\nexports.sub_folders = (path, callback, options = {}) ->\n  uri = [\"folders\", path]\n  call_api(\"get\", uri, {}, callback, options)\n\nexports.upload_mappings = (callback, options = {})->\n  params = only(options, \"next_cursor\", \"max_results\")\n  call_api(\"get\", \"upload_mappings\", params, callback, options)\n\nexports.upload_mapping = (name = null, callback, options = {})->\n  call_api(\"get\", 'upload_mappings', {folder: name}, callback, options)\n\nexports.delete_upload_mapping = (name, callback, options = {})->\n  call_api(\"delete\", 'upload_mappings', {folder: name}, callback, options)\n\nexports.update_upload_mapping = (name, callback, options = {})->\n  params = only(options, \"template\")\n  params[\"folder\"] = name\n  call_api(\"put\", 'upload_mappings', params, callback, options)\n\nexports.create_upload_mapping = (name, callback, options = {})->\n  params = only(options, \"template\")\n  params[\"folder\"] = name\n  call_api(\"post\", 'upload_mappings', params, callback, options)\n\npublishResource = (byKey, value, callback, options={})->\n  params = only(options, \"type\", \"invalidate\", \"overwrite\")\n  params[byKey] = value\n  resource_type = options.resource_type ? \"image\"\n  uri = [\"resources\", resource_type, \"publish_resources\"]\n  options = extend {resource_type: resource_type}, options\n  call_api(\"post\", uri, params, callback, options)\n\nexports.publish_by_prefix = (prefix, callback, options={})->\n  publishResource(\"prefix\", prefix, callback,options)\n\nexports.publish_by_tag = (tag, callback, options={})->\n  publishResource(\"tag\", tag, callback,options)\n\nexports.publish_by_ids = (public_ids, callback, options={})->\n  publishResource(\"public_ids\", public_ids, callback,options)\n\nexports.list_streaming_profiles = (callback, options = {})->\n  call_api(\"get\", \"streaming_profiles\", {}, callback, options)\n\nexports.get_streaming_profile = (name, callback, options = {})->\n  call_api(\"get\", \"streaming_profiles/#{name}\", {}, callback, options)\n\nexports.delete_streaming_profile = (name, callback, options = {})->\n  call_api(\"delete\", \"streaming_profiles/#{name}\", {}, callback, options)\n\nexports.update_streaming_profile = (name, callback, options = {})->\n  params = utils.build_streaming_profiles_param(options)\n  call_api(\"put\", \"streaming_profiles/#{name}\", params, callback, options)\n\nexports.create_streaming_profile = (name, callback, options = {})->\n  params = utils.build_streaming_profiles_param(options)\n  params[\"name\"] = name\n  call_api(\"post\", 'streaming_profiles', params, callback, options)\n\nupdate_resources_access_mode = (access_mode, by_key, value, callback, options = {})->\n  resource_type = options.resource_type ? \"image\"\n  type = options.type ? \"upload\"\n  params = { access_mode: access_mode}\n#  by_key = by_key == 'ids' ? 'ids[]' : by_key\n  params[by_key] = value\n  call_api(\"post\", \"resources/#{resource_type}/#{type}/update_access_mode\", params, callback, options)\n\nexports.search = (params, callback, options= {})->\n  options['content_type']='json'\n  call_api(\"post\", \"resources/search\", params, callback, options)\n\nexports.update_resources_access_mode_by_prefix = (access_mode, prefix, callback, options = {})->\n  update_resources_access_mode(access_mode, \"prefix\", prefix, callback, options)\n\nexports.update_resources_access_mode_by_tag = (access_mode, tag, callback, options = {})->\n  update_resources_access_mode(access_mode, \"tag\", tag, callback, options)\n\nexports.update_resources_access_mode_by_ids = (access_mode, ids, callback, options = {})->\n  update_resources_access_mode(access_mode, \"public_ids[]\", ids, callback, options)\n"
  ]
}